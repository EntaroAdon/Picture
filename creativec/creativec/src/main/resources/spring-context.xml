<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"
	default-lazy-init="true">

	<!-- <context:property-placeholder location="classpath:config.properties" /> -->
	 <!--引入jdbc的配置文件-->
  	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    	<property name="location" value="classpath:config.properties" />
  	</bean>
	<!--扫描包，查注解-->
	<context:component-scan base-package="com.ck.creative">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
    <!-- 配置MyBatis
        typeAliasesPackage 扫描哪个包下的域对象
        typeAliasesSuperType 扫描包以下面的这个类作为父类的域对象 ，表示mybatis支持的这些vo类型的dao操作，没有的话也是可以的
        configLocation：表示mybatis的配置文件的位置，因为我们大部分的配置都在spring设置了，所以需要我们在配置文件写的东西也不多，关于每一个配置属性，我觉得自己看文档会更好：
        mapperLocations:最后的这个属性就比较重要了，因为我们采用的是基于注解的形式来使用mybatis的，所以我们需要指定mapping文件的位置
     -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="typeAliasesPackage" value="com.ck.creative"></property>
        <!-- <property name="typeAliasesSuperType" value="com.ck.creative.common.persistence.BaseEntity"></property> -->
        <property name="configLocation" value="classpath:/mybatis-config.xml"></property>
        <property name="mapperLocations" value="classpath:/mappings/**/*.xml"></property>
    </bean>
	<!-- 自动扫描器 
		扫描basePackage下所有以@MyBatisDao注解的接口
		annotationClass：表示的是自定义的注释，这个自定义注释就是用来注释dao的
	-->
	<bean id="mapperScreenConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="annotationClass" value="com.ck.creative.common.MyBatisDao"></property>
		<property name="basePackage" value="com.ck.creative"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- 配置数据源 -->
	<bean id="dataSource"  class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driver}" />
	    
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 配置监控统计拦截的filters -->
	    <!-- <property name="filters" value="stat" />  -->
		
	</bean>
    
    <!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
</beans>